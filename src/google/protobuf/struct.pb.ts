// Protocol Buffers - Google's data interchange format
// Copyright 2008 Google Inc.  All rights reserved.
// https://developers.google.com/protocol-buffers/
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// @generated by protoc-gen-es-lite unknown with parameter "target=ts,ts_nocheck=false"
// @generated from file google/protobuf/struct.proto (package google.protobuf, syntax proto3)
/* eslint-disable */

import type {
  JsonObject,
  JsonReadOptions,
  JsonValue,
  JsonWriteOptions,
  MessageType,
  PartialFieldInfo,
} from "../../index.js";
import {
  createEnumType,
  createMessageType,
  jsonDebugValue,
  ScalarType,
} from "../../index.js";

export const protobufPackage = "google.protobuf";

/**
 * `NullValue` is a singleton enumeration to represent the null value for the
 * `Value` type union.
 *
 * The JSON representation for `NullValue` is JSON `null`.
 *
 * @generated from enum google.protobuf.NullValue
 */
export enum NullValue {
  /**
   * Null value.
   *
   * @generated from enum value: NULL_VALUE = 0;
   */
  NULL_VALUE = 0,
}

// NullValue_Enum is the enum type for NullValue.
export const NullValue_Enum = createEnumType("google.protobuf.NullValue", [
  { no: 0, name: "NULL_VALUE" },
]);

/**
 * `ListValue` is a wrapper around a repeated field of values.
 *
 * The JSON representation for `ListValue` is JSON array.
 *
 * @generated from message google.protobuf.ListValue
 */
export interface ListValue {
  /**
   * Repeated field of dynamically typed values.
   *
   * @generated from field: repeated google.protobuf.Value values = 1;
   */
  values?: Value[];
}

// ListValue_Wkt contains the well-known-type overrides for ListValue.
const ListValue_Wkt = {
  toJson(msg: ListValue, options?: Partial<JsonWriteOptions>): JsonValue {
    return msg.values?.map((v) => Value.toJson(v, options)) ?? [];
  },
  fromJson(
    json: JsonValue | null | undefined,
    options?: Partial<JsonReadOptions>,
  ): ListValue {
    if (json == null) {
      return {};
    }
    if (!Array.isArray(json)) {
      throw new Error(
        `cannot decode google.protobuf.ListValue from JSON ${jsonDebugValue(json)}`,
      );
    }
    const values: Value[] = json.map((v) => Value.fromJson(v, options));
    return { values: values } as ListValue;
  },
};

// ListValue contains the message type declaration for ListValue.
export const ListValue: MessageType<ListValue> & typeof ListValue_Wkt =
  createMessageType<ListValue, typeof ListValue_Wkt>(
    {
      typeName: "google.protobuf.ListValue",
      fields: [
        {
          no: 1,
          name: "values",
          kind: "message",
          T: () => Value,
          repeated: true,
        },
      ] as readonly PartialFieldInfo[],
      packedByDefault: true,
    },
    ListValue_Wkt,
  );

/**
 * `Value` represents a dynamically typed value which can be either
 * null, a number, a string, a boolean, a recursive struct value, or a
 * list of values. A producer of value is expected to set one of these
 * variants. Absence of any variant indicates an error.
 *
 * The JSON representation for `Value` is JSON value.
 *
 * @generated from message google.protobuf.Value
 */
export interface Value {
  /**
   * The kind of value.
   *
   * @generated from oneof google.protobuf.Value.kind
   */
  kind?:
    | {
        value?: undefined;
        case: undefined;
      }
    | {
        /**
         * Represents a null value.
         *
         * @generated from field: google.protobuf.NullValue null_value = 1;
         */
        value: NullValue;
        case: "nullValue";
      }
    | {
        /**
         * Represents a double value.
         *
         * @generated from field: double number_value = 2;
         */
        value: number;
        case: "numberValue";
      }
    | {
        /**
         * Represents a string value.
         *
         * @generated from field: string string_value = 3;
         */
        value: string;
        case: "stringValue";
      }
    | {
        /**
         * Represents a boolean value.
         *
         * @generated from field: bool bool_value = 4;
         */
        value: boolean;
        case: "boolValue";
      }
    | {
        /**
         * Represents a structured value.
         *
         * @generated from field: google.protobuf.Struct struct_value = 5;
         */
        value: Struct;
        case: "structValue";
      }
    | {
        /**
         * Represents a repeated `Value`.
         *
         * @generated from field: google.protobuf.ListValue list_value = 6;
         */
        value: ListValue;
        case: "listValue";
      };
}

// Value_Wkt contains the well-known-type overrides for Value.
const Value_Wkt = {
  toJson(msg: Value, options?: Partial<JsonWriteOptions>): JsonValue {
    switch (msg.kind?.case) {
      case "nullValue":
        return null;
      case "numberValue":
        if (!Number.isFinite(msg.kind.value)) {
          throw new Error("google.protobuf.Value cannot be NaN or Infinity");
        }
        return msg.kind.value;
      case "boolValue":
        return msg.kind.value;
      case "stringValue":
        return msg.kind.value;
      case "structValue":
        return Struct.toJson(msg.kind.value, {
          ...options,
          emitDefaultValues: true,
        });
      case "listValue":
        return ListValue.toJson(msg.kind.value, {
          ...options,
          emitDefaultValues: true,
        });
      case null:
      case undefined:
      default:
        return null;
    }
  },
  fromJson(
    json: JsonValue | null | undefined,
    _options?: Partial<JsonReadOptions>,
  ): Value {
    const msg = {} as Value;
    switch (typeof json) {
      case "number":
        msg.kind = { case: "numberValue", value: json };
        break;
      case "string":
        msg.kind = { case: "stringValue", value: json };
        break;
      case "boolean":
        msg.kind = { case: "boolValue", value: json };
        break;
      case "object":
        if (json == null) {
          msg.kind = { case: "nullValue", value: NullValue.NULL_VALUE };
        } else if (Array.isArray(json)) {
          msg.kind = { case: "listValue", value: ListValue.fromJson(json) };
        } else {
          msg.kind = { case: "structValue", value: Struct.fromJson(json) };
        }
        break;
      default:
        throw new Error(
          `cannot decode google.protobuf.Value from JSON ${jsonDebugValue(json)}`,
        );
    }
    return msg;
  },
};

// Value contains the message type declaration for Value.
export const Value: MessageType<Value> & typeof Value_Wkt = createMessageType<
  Value,
  typeof Value_Wkt
>(
  {
    typeName: "google.protobuf.Value",
    fields: [
      {
        no: 1,
        name: "null_value",
        kind: "enum",
        T: NullValue_Enum,
        oneof: "kind",
      },
      {
        no: 2,
        name: "number_value",
        kind: "scalar",
        T: ScalarType.DOUBLE,
        oneof: "kind",
      },
      {
        no: 3,
        name: "string_value",
        kind: "scalar",
        T: ScalarType.STRING,
        oneof: "kind",
      },
      {
        no: 4,
        name: "bool_value",
        kind: "scalar",
        T: ScalarType.BOOL,
        oneof: "kind",
      },
      {
        no: 5,
        name: "struct_value",
        kind: "message",
        T: () => Struct,
        oneof: "kind",
      },
      {
        no: 6,
        name: "list_value",
        kind: "message",
        T: () => ListValue,
        oneof: "kind",
      },
    ] as readonly PartialFieldInfo[],
    packedByDefault: true,
  },
  Value_Wkt,
);

/**
 * `Struct` represents a structured data value, consisting of fields
 * which map to dynamically typed values. In some languages, `Struct`
 * might be supported by a native representation. For example, in
 * scripting languages like JS a struct is represented as an
 * object. The details of that representation are described together
 * with the proto support for the language.
 *
 * The JSON representation for `Struct` is JSON object.
 *
 * @generated from message google.protobuf.Struct
 */
export interface Struct {
  /**
   * Unordered map of dynamically typed values.
   *
   * @generated from field: map<string, google.protobuf.Value> fields = 1;
   */
  fields?: { [key: string]: Value };
}

// Struct_Wkt contains the well-known-type overrides for Struct.
const Struct_Wkt = {
  toJson(msg: Struct, options?: Partial<JsonWriteOptions>): JsonValue {
    const json: JsonObject = {};
    if (!msg.fields) {
      return json;
    }
    for (const [k, v] of Object.entries(msg.fields)) {
      json[k] = v != null ? Value.toJson(v, options) : null;
    }
    return json;
  },
  fromJson(
    json: JsonValue | null | undefined,
    _options?: Partial<JsonReadOptions>,
  ): Struct {
    if (typeof json != "object" || json == null || Array.isArray(json)) {
      throw new Error(
        `cannot decode google.protobuf.Struct from JSON ${jsonDebugValue(json)}`,
      );
    }
    const fields = {} as { [key: string]: Value };
    for (const [k, v] of Object.entries(json)) {
      fields[k] = Value.fromJson(v);
    }
    return { fields: fields } as Struct;
  },
};

// Struct contains the message type declaration for Struct.
export const Struct: MessageType<Struct> & typeof Struct_Wkt =
  createMessageType<Struct, typeof Struct_Wkt>(
    {
      typeName: "google.protobuf.Struct",
      fields: [
        {
          no: 1,
          name: "fields",
          kind: "map",
          K: ScalarType.STRING,
          V: { kind: "message", T: () => Value },
        },
      ] as readonly PartialFieldInfo[],
      packedByDefault: true,
    },
    Struct_Wkt,
  );
