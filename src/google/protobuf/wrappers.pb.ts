// Protocol Buffers - Google's data interchange format
// Copyright 2008 Google Inc.  All rights reserved.
// https://developers.google.com/protocol-buffers/
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// Wrappers for primitive (non-message) types. These types are useful
// for embedding primitives in the `google.protobuf.Any` type and for places
// where we need to distinguish between the absence of a primitive
// typed field and its default value.
//
// These wrappers have no meaningful use within repeated fields as they lack
// the ability to detect presence on individual elements.
// These wrappers have no meaningful use within a map or a oneof since
// individual entries of a map or fields of a oneof can already detect presence.

// @generated by protoc-gen-es-lite unknown with parameter "target=ts,ts_nocheck=false"
// @generated from file google/protobuf/wrappers.proto (package google.protobuf, syntax proto3)
/* eslint-disable */

import type {
  JsonReadOptions,
  JsonValue,
  JsonWriteOptions,
  MessageType,
  PartialFieldInfo,
} from "../../index.js";
import {
  createMessageType,
  jsonReadScalar,
  jsonWriteScalar,
  LongType,
  ScalarType,
} from "../../index.js";

export const protobufPackage = "google.protobuf";

/**
 * Wrapper message for `double`.
 *
 * The JSON representation for `DoubleValue` is JSON number.
 *
 * protobuf-go-lite:disable-text
 *
 * @generated from message google.protobuf.DoubleValue
 */
export interface DoubleValue {
  /**
   * The double value.
   *
   * @generated from field: double value = 1;
   */
  value?: number;
}

// DoubleValue_Wkt contains the well-known-type overrides for DoubleValue.
const DoubleValue_Wkt = {
  toJson(msg: DoubleValue, _options?: Partial<JsonWriteOptions>): JsonValue {
    return jsonWriteScalar(ScalarType.DOUBLE, msg.value)!;
  },
  fromJson(
    json: JsonValue | null | undefined,
    _options?: Partial<JsonReadOptions>,
  ): DoubleValue {
    try {
      return {
        value: jsonReadScalar(ScalarType.DOUBLE, json, LongType.BIGINT),
      } as DoubleValue;
    } catch (e) {
      let m = `cannot decode message google.protobuf.DoubleValue from JSON"`;
      if (e instanceof Error && e.message.length > 0) {
        m += `: ${e.message}`;
      }
      throw new Error(m);
    }
  },
};

// DoubleValue contains the message type declaration for DoubleValue.
export const DoubleValue: MessageType<DoubleValue> & typeof DoubleValue_Wkt =
  createMessageType<DoubleValue, typeof DoubleValue_Wkt>(
    {
      typeName: "google.protobuf.DoubleValue",
      fields: [
        { no: 1, name: "value", kind: "scalar", T: ScalarType.DOUBLE },
      ] as readonly PartialFieldInfo[],
      packedByDefault: true,
      fieldWrapper: {
        wrapField(value: number | null | undefined): DoubleValue {
          return DoubleValue.createComplete({ value: value ?? undefined });
        },
        unwrapField(msg: DoubleValue): number | null | undefined {
          return msg.value;
        },
      } as const,
    },
    DoubleValue_Wkt,
  );

/**
 * Wrapper message for `float`.
 *
 * The JSON representation for `FloatValue` is JSON number.
 *
 * protobuf-go-lite:disable-text
 *
 * @generated from message google.protobuf.FloatValue
 */
export interface FloatValue {
  /**
   * The float value.
   *
   * @generated from field: float value = 1;
   */
  value?: number;
}

// FloatValue_Wkt contains the well-known-type overrides for FloatValue.
const FloatValue_Wkt = {
  toJson(msg: FloatValue, _options?: Partial<JsonWriteOptions>): JsonValue {
    return jsonWriteScalar(ScalarType.FLOAT, msg.value)!;
  },
  fromJson(
    json: JsonValue | null | undefined,
    _options?: Partial<JsonReadOptions>,
  ): FloatValue {
    try {
      return {
        value: jsonReadScalar(ScalarType.FLOAT, json, LongType.BIGINT),
      } as FloatValue;
    } catch (e) {
      let m = `cannot decode message google.protobuf.FloatValue from JSON"`;
      if (e instanceof Error && e.message.length > 0) {
        m += `: ${e.message}`;
      }
      throw new Error(m);
    }
  },
};

// FloatValue contains the message type declaration for FloatValue.
export const FloatValue: MessageType<FloatValue> & typeof FloatValue_Wkt =
  createMessageType<FloatValue, typeof FloatValue_Wkt>(
    {
      typeName: "google.protobuf.FloatValue",
      fields: [
        { no: 1, name: "value", kind: "scalar", T: ScalarType.FLOAT },
      ] as readonly PartialFieldInfo[],
      packedByDefault: true,
      fieldWrapper: {
        wrapField(value: number | null | undefined): FloatValue {
          return FloatValue.createComplete({ value: value ?? undefined });
        },
        unwrapField(msg: FloatValue): number | null | undefined {
          return msg.value;
        },
      } as const,
    },
    FloatValue_Wkt,
  );

/**
 * Wrapper message for `int64`.
 *
 * The JSON representation for `Int64Value` is JSON string.
 *
 * protobuf-go-lite:disable-text
 *
 * @generated from message google.protobuf.Int64Value
 */
export interface Int64Value {
  /**
   * The int64 value.
   *
   * @generated from field: int64 value = 1;
   */
  value?: bigint;
}

// Int64Value_Wkt contains the well-known-type overrides for Int64Value.
const Int64Value_Wkt = {
  toJson(msg: Int64Value, _options?: Partial<JsonWriteOptions>): JsonValue {
    return jsonWriteScalar(ScalarType.INT64, msg.value)!;
  },
  fromJson(
    json: JsonValue | null | undefined,
    _options?: Partial<JsonReadOptions>,
  ): Int64Value {
    try {
      return {
        value: jsonReadScalar(ScalarType.INT64, json, LongType.BIGINT),
      } as Int64Value;
    } catch (e) {
      let m = `cannot decode message google.protobuf.Int64Value from JSON"`;
      if (e instanceof Error && e.message.length > 0) {
        m += `: ${e.message}`;
      }
      throw new Error(m);
    }
  },
};

// Int64Value contains the message type declaration for Int64Value.
export const Int64Value: MessageType<Int64Value> & typeof Int64Value_Wkt =
  createMessageType<Int64Value, typeof Int64Value_Wkt>(
    {
      typeName: "google.protobuf.Int64Value",
      fields: [
        { no: 1, name: "value", kind: "scalar", T: ScalarType.INT64 },
      ] as readonly PartialFieldInfo[],
      packedByDefault: true,
      fieldWrapper: {
        wrapField(value: bigint | null | undefined): Int64Value {
          return Int64Value.createComplete({ value: value ?? undefined });
        },
        unwrapField(msg: Int64Value): bigint | null | undefined {
          return msg.value;
        },
      } as const,
    },
    Int64Value_Wkt,
  );

/**
 * Wrapper message for `uint64`.
 *
 * The JSON representation for `UInt64Value` is JSON string.
 *
 * protobuf-go-lite:disable-text
 *
 * @generated from message google.protobuf.UInt64Value
 */
export interface UInt64Value {
  /**
   * The uint64 value.
   *
   * @generated from field: uint64 value = 1;
   */
  value?: bigint;
}

// UInt64Value_Wkt contains the well-known-type overrides for UInt64Value.
const UInt64Value_Wkt = {
  toJson(msg: UInt64Value, _options?: Partial<JsonWriteOptions>): JsonValue {
    return jsonWriteScalar(ScalarType.UINT64, msg.value)!;
  },
  fromJson(
    json: JsonValue | null | undefined,
    _options?: Partial<JsonReadOptions>,
  ): UInt64Value {
    try {
      return {
        value: jsonReadScalar(ScalarType.UINT64, json, LongType.BIGINT),
      } as UInt64Value;
    } catch (e) {
      let m = `cannot decode message google.protobuf.UInt64Value from JSON"`;
      if (e instanceof Error && e.message.length > 0) {
        m += `: ${e.message}`;
      }
      throw new Error(m);
    }
  },
};

// UInt64Value contains the message type declaration for UInt64Value.
export const UInt64Value: MessageType<UInt64Value> & typeof UInt64Value_Wkt =
  createMessageType<UInt64Value, typeof UInt64Value_Wkt>(
    {
      typeName: "google.protobuf.UInt64Value",
      fields: [
        { no: 1, name: "value", kind: "scalar", T: ScalarType.UINT64 },
      ] as readonly PartialFieldInfo[],
      packedByDefault: true,
      fieldWrapper: {
        wrapField(value: bigint | null | undefined): UInt64Value {
          return UInt64Value.createComplete({ value: value ?? undefined });
        },
        unwrapField(msg: UInt64Value): bigint | null | undefined {
          return msg.value;
        },
      } as const,
    },
    UInt64Value_Wkt,
  );

/**
 * Wrapper message for `int32`.
 *
 * The JSON representation for `Int32Value` is JSON number.
 *
 * protobuf-go-lite:disable-text
 *
 * @generated from message google.protobuf.Int32Value
 */
export interface Int32Value {
  /**
   * The int32 value.
   *
   * @generated from field: int32 value = 1;
   */
  value?: number;
}

// Int32Value_Wkt contains the well-known-type overrides for Int32Value.
const Int32Value_Wkt = {
  toJson(msg: Int32Value, _options?: Partial<JsonWriteOptions>): JsonValue {
    return jsonWriteScalar(ScalarType.INT32, msg.value)!;
  },
  fromJson(
    json: JsonValue | null | undefined,
    _options?: Partial<JsonReadOptions>,
  ): Int32Value {
    try {
      return {
        value: jsonReadScalar(ScalarType.INT32, json, LongType.BIGINT),
      } as Int32Value;
    } catch (e) {
      let m = `cannot decode message google.protobuf.Int32Value from JSON"`;
      if (e instanceof Error && e.message.length > 0) {
        m += `: ${e.message}`;
      }
      throw new Error(m);
    }
  },
};

// Int32Value contains the message type declaration for Int32Value.
export const Int32Value: MessageType<Int32Value> & typeof Int32Value_Wkt =
  createMessageType<Int32Value, typeof Int32Value_Wkt>(
    {
      typeName: "google.protobuf.Int32Value",
      fields: [
        { no: 1, name: "value", kind: "scalar", T: ScalarType.INT32 },
      ] as readonly PartialFieldInfo[],
      packedByDefault: true,
      fieldWrapper: {
        wrapField(value: number | null | undefined): Int32Value {
          return Int32Value.createComplete({ value: value ?? undefined });
        },
        unwrapField(msg: Int32Value): number | null | undefined {
          return msg.value;
        },
      } as const,
    },
    Int32Value_Wkt,
  );

/**
 * Wrapper message for `uint32`.
 *
 * The JSON representation for `UInt32Value` is JSON number.
 *
 * protobuf-go-lite:disable-text
 *
 * @generated from message google.protobuf.UInt32Value
 */
export interface UInt32Value {
  /**
   * The uint32 value.
   *
   * @generated from field: uint32 value = 1;
   */
  value?: number;
}

// UInt32Value_Wkt contains the well-known-type overrides for UInt32Value.
const UInt32Value_Wkt = {
  toJson(msg: UInt32Value, _options?: Partial<JsonWriteOptions>): JsonValue {
    return jsonWriteScalar(ScalarType.UINT32, msg.value)!;
  },
  fromJson(
    json: JsonValue | null | undefined,
    _options?: Partial<JsonReadOptions>,
  ): UInt32Value {
    try {
      return {
        value: jsonReadScalar(ScalarType.UINT32, json, LongType.BIGINT),
      } as UInt32Value;
    } catch (e) {
      let m = `cannot decode message google.protobuf.UInt32Value from JSON"`;
      if (e instanceof Error && e.message.length > 0) {
        m += `: ${e.message}`;
      }
      throw new Error(m);
    }
  },
};

// UInt32Value contains the message type declaration for UInt32Value.
export const UInt32Value: MessageType<UInt32Value> & typeof UInt32Value_Wkt =
  createMessageType<UInt32Value, typeof UInt32Value_Wkt>(
    {
      typeName: "google.protobuf.UInt32Value",
      fields: [
        { no: 1, name: "value", kind: "scalar", T: ScalarType.UINT32 },
      ] as readonly PartialFieldInfo[],
      packedByDefault: true,
      fieldWrapper: {
        wrapField(value: number | null | undefined): UInt32Value {
          return UInt32Value.createComplete({ value: value ?? undefined });
        },
        unwrapField(msg: UInt32Value): number | null | undefined {
          return msg.value;
        },
      } as const,
    },
    UInt32Value_Wkt,
  );

/**
 * Wrapper message for `bool`.
 *
 * The JSON representation for `BoolValue` is JSON `true` and `false`.
 *
 * protobuf-go-lite:disable-text
 *
 * @generated from message google.protobuf.BoolValue
 */
export interface BoolValue {
  /**
   * The bool value.
   *
   * @generated from field: bool value = 1;
   */
  value?: boolean;
}

// BoolValue_Wkt contains the well-known-type overrides for BoolValue.
const BoolValue_Wkt = {
  toJson(msg: BoolValue, _options?: Partial<JsonWriteOptions>): JsonValue {
    return jsonWriteScalar(ScalarType.BOOL, msg.value)!;
  },
  fromJson(
    json: JsonValue | null | undefined,
    _options?: Partial<JsonReadOptions>,
  ): BoolValue {
    try {
      return {
        value: jsonReadScalar(ScalarType.BOOL, json, LongType.BIGINT),
      } as BoolValue;
    } catch (e) {
      let m = `cannot decode message google.protobuf.BoolValue from JSON"`;
      if (e instanceof Error && e.message.length > 0) {
        m += `: ${e.message}`;
      }
      throw new Error(m);
    }
  },
};

// BoolValue contains the message type declaration for BoolValue.
export const BoolValue: MessageType<BoolValue> & typeof BoolValue_Wkt =
  createMessageType<BoolValue, typeof BoolValue_Wkt>(
    {
      typeName: "google.protobuf.BoolValue",
      fields: [
        { no: 1, name: "value", kind: "scalar", T: ScalarType.BOOL },
      ] as readonly PartialFieldInfo[],
      packedByDefault: true,
      fieldWrapper: {
        wrapField(value: boolean | null | undefined): BoolValue {
          return BoolValue.createComplete({ value: value ?? undefined });
        },
        unwrapField(msg: BoolValue): boolean | null | undefined {
          return msg.value;
        },
      } as const,
    },
    BoolValue_Wkt,
  );

/**
 * Wrapper message for `string`.
 *
 * The JSON representation for `StringValue` is JSON string.
 *
 * protobuf-go-lite:disable-text
 *
 * @generated from message google.protobuf.StringValue
 */
export interface StringValue {
  /**
   * The string value.
   *
   * @generated from field: string value = 1;
   */
  value?: string;
}

// StringValue_Wkt contains the well-known-type overrides for StringValue.
const StringValue_Wkt = {
  toJson(msg: StringValue, _options?: Partial<JsonWriteOptions>): JsonValue {
    return jsonWriteScalar(ScalarType.STRING, msg.value)!;
  },
  fromJson(
    json: JsonValue | null | undefined,
    _options?: Partial<JsonReadOptions>,
  ): StringValue {
    try {
      return {
        value: jsonReadScalar(ScalarType.STRING, json, LongType.BIGINT),
      } as StringValue;
    } catch (e) {
      let m = `cannot decode message google.protobuf.StringValue from JSON"`;
      if (e instanceof Error && e.message.length > 0) {
        m += `: ${e.message}`;
      }
      throw new Error(m);
    }
  },
};

// StringValue contains the message type declaration for StringValue.
export const StringValue: MessageType<StringValue> & typeof StringValue_Wkt =
  createMessageType<StringValue, typeof StringValue_Wkt>(
    {
      typeName: "google.protobuf.StringValue",
      fields: [
        { no: 1, name: "value", kind: "scalar", T: ScalarType.STRING },
      ] as readonly PartialFieldInfo[],
      packedByDefault: true,
      fieldWrapper: {
        wrapField(value: string | null | undefined): StringValue {
          return StringValue.createComplete({ value: value ?? undefined });
        },
        unwrapField(msg: StringValue): string | null | undefined {
          return msg.value;
        },
      } as const,
    },
    StringValue_Wkt,
  );

/**
 * Wrapper message for `bytes`.
 *
 * The JSON representation for `BytesValue` is JSON string.
 *
 * protobuf-go-lite:disable-text
 *
 * @generated from message google.protobuf.BytesValue
 */
export interface BytesValue {
  /**
   * The bytes value.
   *
   * @generated from field: bytes value = 1;
   */
  value?: Uint8Array;
}

// BytesValue_Wkt contains the well-known-type overrides for BytesValue.
const BytesValue_Wkt = {
  toJson(msg: BytesValue, _options?: Partial<JsonWriteOptions>): JsonValue {
    return jsonWriteScalar(ScalarType.BYTES, msg.value)!;
  },
  fromJson(
    json: JsonValue | null | undefined,
    _options?: Partial<JsonReadOptions>,
  ): BytesValue {
    try {
      return {
        value: jsonReadScalar(ScalarType.BYTES, json, LongType.BIGINT),
      } as BytesValue;
    } catch (e) {
      let m = `cannot decode message google.protobuf.BytesValue from JSON"`;
      if (e instanceof Error && e.message.length > 0) {
        m += `: ${e.message}`;
      }
      throw new Error(m);
    }
  },
};

// BytesValue contains the message type declaration for BytesValue.
export const BytesValue: MessageType<BytesValue> & typeof BytesValue_Wkt =
  createMessageType<BytesValue, typeof BytesValue_Wkt>(
    {
      typeName: "google.protobuf.BytesValue",
      fields: [
        { no: 1, name: "value", kind: "scalar", T: ScalarType.BYTES },
      ] as readonly PartialFieldInfo[],
      packedByDefault: true,
      fieldWrapper: {
        wrapField(value: Uint8Array | null | undefined): BytesValue {
          return BytesValue.createComplete({ value: value ?? undefined });
        },
        unwrapField(msg: BytesValue): Uint8Array | null | undefined {
          return msg.value;
        },
      } as const,
    },
    BytesValue_Wkt,
  );
