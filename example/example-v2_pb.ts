// @generated by protoc-gen-es-lite v0.0.0 with parameter "target=ts,ts_nocheck=false"
// @generated from file example/example.proto (package example, syntax proto3)
/* eslint-disable */

import { newFieldList, PartialMessage, MessageType } from "../src"; // "@aptre/protobuf-es-lite";

export const protobufPackage = 'echo'

/**
 * ExampleEnum is an example enumeration.
 *
 * @generated from enum example.ExampleEnum
 */
export enum ExampleEnum {
  /**
   * @generated from enum value: UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * @generated from enum value: FIRST = 1;
   */
  FIRST = 1,

  /**
   * @generated from enum value: SECOND = 2;
   */
  SECOND = 2,
}

// ExampleEnum_Name maps the enum names to the values.
export const ExampleEnum_Name = {
  UNKNOWN: ExampleEnum.UNKNOWN,
  FIRST: ExampleEnum.FIRST,
  SECOND: ExampleEnum.SECOND,
}

/**
 * EchoMsg is the message body for Echo.
 *
 * @generated from message example.EchoMsg
 */
export interface EchoMsg implements Message<EchoMsg> {
  /**
   * @generated from field: string body = 1;
   */
  body: string
}

export const EchoMsg: MessageType<EchoMsg> = {
  typeName = "example.EchoMsg",

  fields: newFieldList(() => [
    { no: 1, name: "body", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ], true),

  create(partial?: PartialMessage<EchoMsg>): EchoMsg {
    const out: PartialMessage<EchoMsg> = {}
    proto3.util.initPartial(partial, out);
    return out
  },

  fromBinary(data: Uint8Array, options?: Partial<BinaryReadOptions>): EchoMsg {
    const type = EchoMsg,
      format = type.runtime.bin,
      opt = format.makeReadOptions(options);
    format.readMessage(this, opt.readerFactory(data), data.byteLength, opt);
    return this;
  },

  fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EchoMsg {
    const type = EchoMsg,
      format = type.runtime.json,
      opt = format.makeReadOptions(options);
    format.readMessage(type, jsonValue, opt, this as unknown as EchoMsg);
    return this;
  }

  fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EchoMsg;

  equals(other: EchoMsg | PlainMessage<T> | undefined | null): boolean {
    return this.getType().runtime.util.equals(
      this.getType(),
      this as unknown as T,
      other,
    );
  }
} as const
