// @generated by protoc-gen-es-lite v0.0.0 with parameter "target=ts,ts_nocheck=false"
// @generated from file example/example.proto (package example, syntax proto3)
/* eslint-disable */

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * ExampleEnum is an example enumeration.
 *
 * @generated from enum example.ExampleEnum
 */
export enum ExampleEnum {
  /**
   * @generated from enum value: UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * @generated from enum value: FIRST = 1;
   */
  FIRST = 1,

  /**
   * @generated from enum value: SECOND = 2;
   */
  SECOND = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(ExampleEnum)
proto3.util.setEnumType(ExampleEnum, "example.ExampleEnum", [
  { no: 0, name: "UNKNOWN" },
  { no: 1, name: "FIRST" },
  { no: 2, name: "SECOND" },
]);

/**
 * EchoMsg is the message body for Echo.
 *
 * @generated from message example.EchoMsg
 */
export class EchoMsg extends Message<EchoMsg> {
  /**
   * @generated from field: string body = 1;
   */
  body = "";

  /**
   * @generated from field: google.protobuf.Timestamp ts = 2;
   */
  ts?: Timestamp;

  /**
   * @generated from field: example.ExampleEnum example_enum = 3;
   */
  exampleEnum = ExampleEnum.UNKNOWN;

  constructor(data?: PartialMessage<EchoMsg>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "example.EchoMsg";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "body", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "ts", kind: "message", T: Timestamp },
    { no: 3, name: "example_enum", kind: "enum", T: proto3.getEnumType(ExampleEnum) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EchoMsg {
    return new EchoMsg().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EchoMsg {
    return new EchoMsg().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EchoMsg {
    return new EchoMsg().fromJsonString(jsonString, options);
  }

  static equals(a: EchoMsg | PlainMessage<EchoMsg> | undefined, b: EchoMsg | PlainMessage<EchoMsg> | undefined): boolean {
    return proto3.util.equals(EchoMsg, a, b);
  }
}

